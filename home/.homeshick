#!/usr/bin/env bash


repos="$HOME/.homesick/repos"

homeshick="$repos/homeshick"
# It's either this^ or the one below:
# scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# The install script however symlinks us. So $0 changes.

source $homeshick/utils/log.sh
source $homeshick/utils/fs.sh
source $homeshick/utils/git.sh
source $homeshick/utils/help.sh



test -x `which git` || err "git not found in path"

mkdir -p "$repos"

TALK=true
SKIP=false
FORCE=false

# Retrieve all the flags preceeding a subcommand
while [ $# -gt 0 ]; do
	if [[ "$1" =~ ^- ]]; then
		case $1 in
			-h | --help)  cmd="help" ; shift; continue ;;
			-q | --quiet) TALK=true  ; shift; continue ;;
			-s | --skip)  SKIP=true  ; shift; continue ;;
			-f | --force) FORCE=true ; shift; continue ;;
			*)            err "Unknown option '$1'"    ;;
		esac
	else
		break
	fi
done

[ $# -gt 0 ] || cmd="help"

# Get the subcommand
if [ -z "$cmd" ]; then
	for valid_cmd in clone generate list updates pull symlink track help; do
		if [ "$valid_cmd" = $1 ]; then
			cmd=$1
			shift
			break
		fi
	done
	if [ -z "$cmd" ]; then
		err "Unknown command '$1'"
	fi
fi

# Get the arguments for the subcommand, also parse flags if there are any left
while [ $# -gt 0 ]; do
	if [[ "$1" =~ ^- ]]; then
		case $1 in
			-h | --help)  cmd="help" ; shift; continue ;;
			-q | --quiet) TALK=true  ; shift; continue ;;
			-s | --skip)  SKIP=true  ; shift; continue ;;
			-f | --force) FORCE=true ; shift; continue ;;
			*)            err "Unknown option '$1'"    ;;
		esac
	fi
	
	case $cmd in
		clone)    [ -z "$url" ] || err "Only one URL param allowed"
			url=$1
			shift; continue ;;
		generate) [ -z "$path" ] || err "Only one PATH param allowed"
			path=$1
			shift; continue ;;
		list)     err "The 'list' command does not take any arguments" ;;
		updates)  err "The 'updates' command does not take any arguments" ;;
		pull)     [ -z "$castle" ] || err "Only one CASTLE param allowed"
			castle=$1
			shift; continue ;;
		symlink)  [ -z "$castle" ] || err "Only one CASTLE param allowed"
			castle=$1
			shift; continue ;;
		track)
			if [ -z "$file" ]; then
				file=$1
			else
				if [ -z "$castle" ]; then
					castle=$1
				else
					err "'track' takes only two parameters"
				fi
			fi
			shift; continue ;;
		help) [ -z "$help_cmd" ] && help_cmd=$1
			shift; continue;;
		*)    err "Unknown command '$1'" ;;
	esac
done


case $cmd in
	clone)    clone $url          ;;
	generate) generate $path      ;;
	list)     list                ;;
	updates)  updates             ;;
	pull)     pull $castle        ;;
	symlink)  symlink $castle     ;;
	track)    track $file $castle ;;
	help)     help $help_cmd      ;;
esac









